"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_environment_node_1 = __importDefault(require("jest-environment-node"));
const logger_1 = require("./logger");
const KEYS = {
    CONTROL_C: '\u0003',
    CONTROL_D: '\u0004',
    ENTER: '\r',
};
class JestRestEnvironment extends jest_environment_node_1.default {
    constructor(config) {
        super(config);
        this._config = config;
    }
    async setup() {
        this.global.axios = require('axios');
        this.global.jestRest = {
            debug: async () => {
                console.log('\n\n🕵️‍  Code is paused, press enter to resume \n');
                // Run an infinite promise
                return new Promise((resolve) => {
                    const { stdin } = process;
                    const onKeyPress = (key) => {
                        if (key === KEYS.CONTROL_C || key === KEYS.CONTROL_D || key === KEYS.ENTER) {
                            stdin.removeListener('data', onKeyPress);
                            if (!listening) {
                                if (stdin.isTTY) {
                                    stdin.setRawMode(false);
                                }
                                stdin.pause();
                            }
                            resolve();
                        }
                    };
                    const listening = stdin.listenerCount('data') > 0;
                    if (!listening) {
                        if (stdin.isTTY) {
                            stdin.setRawMode(true);
                        }
                        stdin.resume();
                        stdin.setEncoding('utf8');
                    }
                    stdin.on('data', onKeyPress);
                });
            },
        };
        this.myRequestInterceptor = this.global.axios.interceptors.request.use(logger_1.requestLogger, logger_1.requestErrorLogger);
        this.myResponseInterceptor = this.global.axios.interceptors.response.use(logger_1.responseLogger, logger_1.responseErrorLogger);
    }
    async handleTestEvent(event, state) {
        // Hack to set testTimeout for jestRest debugging
        if (event.name === 'add_test' &&
            event.fn &&
            event.fn.toString().includes('jestRest.debug()') &&
            process.stdin.isTTY) {
            // Set timeout to 4 days
            state.testTimeout = 4 * 24 * 60 * 60 * 1000;
        }
    }
    async teardown() {
        if (this.global.axios) {
            this.global.axios.interceptors.request.eject(this.myRequestInterceptor);
            this.global.axios.interceptors.response.eject(this.myResponseInterceptor);
        }
    }
}
exports.default = JestRestEnvironment;
