"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.responseErrorLogger = exports.requestErrorLogger = exports.responseLogger = exports.requestLogger = void 0;
/* eslint-disable @typescript-eslint/no-var-requires */
const chalk_1 = __importDefault(require("chalk"));
const debug = require('debug');
const debugInfo = debug('jest-rest:info');
const debugError = debug('jest-rest:error');
const debugRequest = debug('jest-rest:request');
const debugResponse = debug('jest-rest:response');
const requestColor = chalk_1.default.grey;
const responseColor = chalk_1.default.cyan;
exports.requestLogger = (req) => {
    const loggerEnvVariable = getEnvVariable();
    if (!loggerEnvVariable)
        return req;
    enableDebugIfNotFor(loggerEnvVariable);
    reqLogger(req);
    return req;
};
exports.responseLogger = (res) => {
    const loggerEnvVariable = getEnvVariable();
    if (!loggerEnvVariable)
        return res;
    enableDebugIfNotFor(loggerEnvVariable);
    resLogger(res);
    return res;
};
exports.requestErrorLogger = (error) => {
    const loggerEnvVariable = getEnvVariable();
    if (!loggerEnvVariable)
        return error;
    enableDebugIfNotFor(loggerEnvVariable);
    if (error.request !== undefined) {
        const req = reqLogger(error.request);
        debugError(`%s`, req);
    }
    return Promise.reject(error);
};
exports.responseErrorLogger = (error) => {
    const loggerEnvVariable = getEnvVariable();
    if (!loggerEnvVariable)
        return error;
    enableDebugIfNotFor(loggerEnvVariable);
    if (error.response !== undefined) {
        const reqLog = formatRequest(error.response.config);
        const prettifyRequest = requestColor(JSON.stringify(reqLog, null, 2));
        debugError(`%s`, prettifyRequest);
        const res = resLogger(error.response);
        debugError(`%s`, res);
    }
    return Promise.reject(error);
};
const reqLogger = (req) => {
    const reqLog = formatRequest(req);
    const prettifyRequest = requestColor(JSON.stringify(reqLog, null, 2));
    debugRequest(`%s`, prettifyRequest);
    debugInfo(`%s`, prettifyRequest);
    return prettifyRequest;
};
const resLogger = (res) => {
    const resLog = formatResponse(res);
    const prettifyResponse = responseColor(JSON.stringify(resLog, null, 2));
    debugResponse(`%s`, prettifyResponse);
    debugInfo(`%s`, prettifyResponse);
    return prettifyResponse;
};
const getEnvVariable = () => process.env.logger || '';
const enableDebugIfNotFor = (name) => {
    if (!debug.enabled(`${name}`)) {
        debug.enable(`${name}`);
    }
};
const formatRequest = (req) => {
    const method = req.method;
    const url = req.url;
    let headers = req.headers;
    if (headers) {
        headers = Object.assign(headers.common ? { ...headers.common } : {}, method ? { ...headers[method] } : {}, {
            ...headers,
        });
        ['common', 'get', 'post', 'head', 'put', 'patch', 'delete'].forEach((header) => {
            if (headers[header]) {
                delete headers[header];
            }
        });
        if (headers['User-Agent'])
            delete headers['User-Agent'];
    }
    if (method) {
        method.toUpperCase();
    }
    let body = req.data;
    if (Buffer.isBuffer(body)) {
        body = `buffer body; will not be printed`;
    }
    return Object.assign({
        method,
        url,
    }, req.params ? { params: req.params } : {}, { headers }, body ? { body } : {}, req.auth ? { auth: req.auth } : {});
};
const formatResponse = (res) => {
    const body = res.data;
    const headers = res.headers;
    const status = res.status;
    return {
        status,
        headers,
        body,
    };
};
